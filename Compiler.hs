module Compiler where

import Interpreter
import Parser

--
-- `compileCmd c s` evaluates to `interpretCmd c s`.
--
-- SIDE EFFECT
--   If `c` is of shape `Fd n`, then a Javascript
--   statement is appended to the file "output.html".
--   Let `p` be the position in `interpretCmd c s` (i.e.
--   after interpreting the command `c` in state `s`).
--   Then the appended statement is:
--     "ctx.moveTo(p);" - when the pen is up in state `s`
--     "ctx.lineTo(p);" - when the pen is down in state `s`.
--
compileCmd :: Command -> TurtleState -> IO TurtleState
compileCmd cmd s =
  do
    appendFile "output.html" canvasCmd
    return s'
  where
    s' = interpretCmd cmd s
    canvasCmd
      | pen s == PenUp = "ctx.moveTo" ++ show (pos s') ++ ";\n"
      | pen s == PenDown = "ctx.lineTo" ++ show (pos s') ++ ";\n"

-- The fixed first part of the HTML file generated by compilation.
startTemplate :: String
startTemplate =
  unlines
    [ "<html>",
      "  <body>",
      "    <canvas id=\"myCanvas\" width=\"500\" height=\"500\"></canvas>",
      "    <script>",
      "      const canvas = document.getElementById(\"myCanvas\");",
      "      const ctx = canvas.getContext(\"2d\");",
      "",
      "      ctx.beginPath();",
      "      ctx.moveTo(0,500);"
    ]

-- The fixed final part of the HTML file generated by compilation.
endTemplate :: String
endTemplate =
  unlines
    [ "      ctx.stroke();",
      "",
      "    </script>",
      "  </body>",
      "</html>"
    ]

--
-- `compileProg p s` evaluates to `interpretProg p s`.
--
-- SIDE EFFECT
--   As a side effect, Javascript statements are appended
--   to "output.html" describing how to draw the path of
--   the turtle on the canvas.  See `compileProg` above.
--
compileProg :: Program -> TurtleState -> IO TurtleState
compileProg (Cmd c) s = compileCmd c s
compileProg (Seq c p) s =
  do
    s' <- compileCmd c s
    compileProg p s'

--
-- If `s` is a valid Turtle program, then `compile s` evaluates to `()`.
--
-- SIDE EFFECT
--   As a side effect, an HTML file "output.html" is written
--   in the working directory, which displays the path of
--   the turtle on a canvas.
--
compile :: String -> IO ()
compile s =
  do
    writeFile "output.html" startTemplate
    compileProg (parse s) initialTurtleState
    appendFile "output.html" endTemplate

--
-- If the file at filesystem location `fp` contains a valid Turtle
-- program, then `compileFile fp` evaluates to `()`.
--
-- SIDE EFFECT
--   As a side effect, an HTML file "output.html" is written
--   in the working directory, which displays the path of
--   the turtle on a canvas.
--
compileFile :: FilePath -> IO ()
compileFile fp =
  do
    s <- readFile fp
    compile s
